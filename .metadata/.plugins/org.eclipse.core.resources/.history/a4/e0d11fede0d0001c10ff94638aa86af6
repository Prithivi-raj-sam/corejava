package com.chainsys.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.chainsys.oops.testDemoA;
//import java.lang.reflect.Parameter;

public class ListClassMembers {
	public static void main(String[] args) {
		testDemoA t=new testDemoA();
		t.testA();
	}
	
	public void testB()
	  {
		 String classname="com.chainsys.reflection.Actor";
		 Class<?> actorclass = null;
		 try {
			actorclass=Class.forName(classname); // Actor actorclass=null;
		 } catch (ClassNotFoundException e1) 
		 {
			e1.printStackTrace();
		 } 
		 Object obj = null;
		 try {
			//obj=actorclass.newInstance(); // new Actor();
				obj = actorclass.getDeclaredConstructors()[0].newInstance();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (ReflectiveOperationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}  catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		 printClassInfo(obj);
		 
     }
	public static void printClassInfo(Object ob)
	  {
		  Class<?> classreflected= ob.getClass();
		 System.out.println(classreflected.getName());
		 System.out.println("Constructors:");
	     Constructor<?> constructorlist[] = classreflected.getConstructors();
	     for(int i = 0; i < constructorlist.length; i++)
	     {
	       System.out.println("\t" + constructorlist[i]);
	     }
	     //
	     System.out.println("Methods:");
	     Method methodlist[] = classreflected.getMethods();
	for(int i = 0; i < methodlist.length; i++)
	     {
	   	  methodlist[i].setAccessible(true);
	       System.out.println("\t Method Name: " + methodlist[i].getName()+
	       		" ParameterCount "+ methodlist[i].getParameterCount()+
	       		" returnType "+ methodlist[i].getReturnType());
	     }
	  }
	public void testA() {
		String s1="paithyam";
		printClassInfo(s1);
		Integer i1=9999;
		printClassInfo(i1);
		Emp e=new Emp();
		printClassInfo(e);
		Actor a=new Actor();
		printClassInfo(a);
		
	}
}